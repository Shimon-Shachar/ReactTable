[{"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\index.js":"1","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\store\\index.js":"2","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\TableNested.js":"3","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\AddUpdate.js":"4","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\Table.js":"5","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\store\\users-slice.js":"6","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\snippets\\data.js":"7","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\services\\baseHttp.js":"8","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\services\\adminHttp.js":"9","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\UI\\Card.js":"10","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\Layout\\MainHeader.js":"11","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\UI\\Modal.js":"12","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\store\\table-slice.js":"13","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\UI\\ErrorModal.js":"14","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\App.js":"15","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\Layout\\Layout.js":"16"},{"size":559,"mtime":1667468252833,"results":"17","hashOfConfig":"18"},{"size":280,"mtime":1667468252956,"results":"19","hashOfConfig":"18"},{"size":3610,"mtime":1667468253018,"results":"20","hashOfConfig":"18"},{"size":5722,"mtime":1667471071327,"results":"21","hashOfConfig":"18"},{"size":8797,"mtime":1667482992224,"results":"22","hashOfConfig":"18"},{"size":3366,"mtime":1667474358867,"results":"23","hashOfConfig":"18"},{"size":7750,"mtime":1666166757557,"results":"24","hashOfConfig":"18"},{"size":1355,"mtime":1667468252925,"results":"25","hashOfConfig":"18"},{"size":1527,"mtime":1667469908320,"results":"26","hashOfConfig":"18"},{"size":229,"mtime":1667468253165,"results":"27","hashOfConfig":"18"},{"size":2069,"mtime":1667470123569,"results":"28","hashOfConfig":"18"},{"size":777,"mtime":1667468253123,"results":"29","hashOfConfig":"18"},{"size":736,"mtime":1667468252942,"results":"30","hashOfConfig":"18"},{"size":608,"mtime":1667468253180,"results":"31","hashOfConfig":"18"},{"size":7669,"mtime":1667483273545,"results":"32","hashOfConfig":"18"},{"size":387,"mtime":1667468253107,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1nz6yfu",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\index.js",[],["74","75"],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\store\\index.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\TableNested.js",["76"],"import React, { useMemo, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\nconst TableNested = (props) => {\r\n  console.log(\"<NestedTable>\");\r\n  \r\n  const [isLoadingNestedTable, setIsLodingNestedTable] = useState(false);\r\n\r\n  const acc = useSelector((state) => state.users.users[props.index].accountInfo);\r\n  console.log(acc);\r\n  const DefaultColumnFilter = ({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n  }) => {\r\n    const count = preFilteredRows.length;\r\n    return (\r\n      <input\r\n        value={filterValue || \"\"}\r\n        onChange={(e) => {\r\n          setFilter(e.target.value || undefined);\r\n        }}\r\n        placeholder={`Search ${count} records...`}\r\n      />\r\n    );\r\n  };\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    []\r\n  );\r\n  const data = useMemo(() => acc, [acc]);\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Bank\",\r\n        accessor: \"bank\",\r\n      },\r\n      {\r\n        Header: \"Account Name\",\r\n        accessor: \"accountName\",\r\n      },\r\n      {\r\n        Header: \"Default Account\",\r\n        accessor: \"isDefaultAccount\",\r\n        Cell: (props)=> {\r\n          const bool = props.row.original.isDefaultAccount.toString()\r\n          console.log(\"is default cell\",)\r\n          return <span>{bool}</span>\r\n        }\r\n      },\r\n      {\r\n        Header: \"Account Type\",\r\n        accessor: \"accountType\",\r\n      },\r\n      {\r\n        Header: \"Branch\",\r\n        accessor: \"branch\",\r\n      },\r\n      {\r\n        Header: \"Account Number\",\r\n        accessor: \"account\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoadingNestedTable && <h2 style={{ color: \"red\" }}>Loading...</h2>}\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <React.Fragment key={headerGroup.headers.length + \"_hfrag\"}>\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render(\"Header\")}\r\n                    <div>\r\n                      {column.canFilter ? column.render(\"Filter\") : null}\r\n                    </div>\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? \" ðŸ”½\"\r\n                          : \" ðŸ”¼\"\r\n                        : \"\"}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </React.Fragment>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <React.Fragment key={i + \"_frag\"}>\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default TableNested;\r\n","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\AddUpdate.js",["77","78"],"import { useDispatch } from \"react-redux\";\r\nimport React, { useState, useRef, Fragment } from \"react\";\r\nimport { usersActions } from \"../store/users-slice\";\r\nimport classes from \"./AddUpdate.module.css\";\r\nimport Modal from \"./UI/Modal\";\r\n\r\nconst _date = Date();\r\n\r\nconst AddUpdate = (props) => {\r\n  console.log(\"in <AddUpdate.>\");\r\n  const both = props.addAndUpdate;\r\n  let { firstName, lastName, organizationCode, userId, email } = props.formId;\r\n  if (props.isAddUser) {\r\n    firstName= \"\";\r\n    lastName=\"\";\r\n    organizationCode=\"\";\r\n    email=\"\";\r\n  }\r\n  \r\n  const firstNameRef = useRef();\r\n  const lastNameRef = useRef();\r\n  const organizationCodeRef = useRef();\r\n  const emailRef = useRef();\r\n  const saveRef = useRef();\r\n  const dateRef = useRef();\r\n  // const [form, setForm] = useState({\r\n  //   firstName: \"\",\r\n  //   lastName: \"\",\r\n  //   organizationCode: \"\",\r\n  //   lastLoginDate: \"\",\r\n  //   userId: \"\",\r\n  //   email: \"\",\r\n  //   status: \"\",\r\n  //   accountInfo: [\r\n  //     {\r\n  //       bank: \"\",\r\n  //       accountName: \"\",\r\n  //       isDefaultAccount: \"\",\r\n  //       accountType: \"\",\r\n  //       branch: \"\",\r\n  //       account: \"\",\r\n  //     },\r\n  //   ],\r\n  // });\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const addHandler = () => {\r\n   \r\n    const newUser = {\r\n      firstName: firstNameRef.current.value,\r\n      lastName: lastNameRef.current.value,\r\n      organizationCode: organizationCodeRef.current.value,\r\n      //editing the lastLoginDate for a new user or cuurent is nonsensicle from any way you decide to look at it\r\n      lastLoginDate: dateRef.current.value,\r\n      userId: \"\",\r\n      email: emailRef.current.value,\r\n      status: \"\",\r\n      accountInfo: [\r\n        {\r\n          bank: \"\",\r\n          accountName: \"\",\r\n          isDefaultAccount: \"\",\r\n          accountType: \"\",\r\n          branch: \"\",\r\n          account: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    dispatch(usersActions.addNewUser({newUser, userId}));\r\n    setSubmitted(true);\r\n  };\r\n  const updateHandler = () => {\r\n    const save = saveRef.current.value;\r\n    if (save) {\r\n      dispatch(usersActions.saveOldVal(props.index));\r\n    }\r\n\r\n    const update = {\r\n      firstName: firstNameRef.current.value,\r\n      lastName: lastNameRef.current.value,\r\n      organizationCode: organizationCodeRef.current.value,\r\n      lastLoginDate: _date,\r\n      userId: \"\",\r\n      email: emailRef.current.value,\r\n      status: \"\",\r\n      accountInfo: [\r\n        {\r\n          bank: \"\",\r\n          accountName: \"\",\r\n          isDefaultAccount: \"\",\r\n          accountType: \"\",\r\n          branch: \"\",\r\n          account: \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    dispatch(usersActions.updateUser({ userId: userId, update, save }));\r\n    setSubmitted(true);\r\n  };\r\n  return (\r\n    <Modal onClose={props.onClose}>\r\n      <form onSubmit={addHandler}>\r\n        {/* {submitted && (\r\n          <div>{`First Name: ${form.firstName} Last Name: ${form.lastName}`}</div>\r\n        )} */}\r\n        <div className={classes[\"form-control\"]}>\r\n          <div>\r\n            <label htmlFor=\"save\">Save current user info?</label>\r\n            <input ref={saveRef} id=\"save\" type=\"checkbox\" value=\"true\" className={classes.savechkBox}></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"fname\">First Name</label>\r\n            <input\r\n              ref={firstNameRef}\r\n              id=\"fname\"\r\n              type=\"text\"\r\n              defaultValue={firstName}\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"lname\">Last Name</label>\r\n            <input\r\n              ref={lastNameRef}\r\n              id=\"lname\"\r\n              type=\"text\"\r\n              defaultValue={lastName}\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"date\">Date</label>\r\n            <input\r\n              ref={dateRef}\r\n              id=\"date\"\r\n              type=\"date\"\r\n              defaultValue={_date}\r\n            ></input>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"organizationCode\">Organization Code</label>\r\n            <input\r\n              ref={organizationCodeRef}\r\n              id=\"organizationCode\"\r\n              type=\"text\"\r\n              defaultValue={organizationCode}\r\n            ></input>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"email\">E-mail</label>\r\n            <input\r\n              ref={emailRef}\r\n              id=\"email\"\r\n              type=\"email\"\r\n              defaultValue={email}\r\n            ></input>\r\n          </div>\r\n          <div className={classes[\"form-actions\"]}>\r\n            {(props.isAddUser || both) && <button\r\n              style={{ margin: \"15px\" }}\r\n              className={classes.addUserbtn}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                addHandler();\r\n                props.onClose();\r\n              }}\r\n            >\r\n              Add new User\r\n            </button>}\r\n            {(!props.isAddUser || both) && <button\r\n              style={{ margin: \"15px\" }}\r\n              className={classes.changeUserbtn}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                updateHandler();\r\n                props.onClose();\r\n              }}\r\n            >\r\n              Submit changes for User: {userId}\r\n            </button>}\r\n            <button\r\n              style={{ margin: \"15px\" }}\r\n              className={classes.closebtn}\r\n              onClick={() => {\r\n                props.onClose();\r\n              }}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\nexport default AddUpdate;\r\n","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\Table.js",["79","80","81"],"import React, { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTable, useFilters, useSortBy, usePagination } from \"react-table\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport update from \"immutability-helper\";\nimport classes from \"./Table.module.css\";\nimport TableNested from \"./TableNested\";\nimport AddUpdate from \"./AddUpdate\";\nimport ErrorModal from \"./UI/ErrorModal\";\n\n\nconst Table = ({ open,openRowId,columns, getPage ,toggleForm, openForm, formId,error,empty,  onClose, isAddUser, addAndUpdate}) => {\n  \n  const currentDBPage = useSelector((state) => state.users.currentPage);\n  const data1 = useSelector((state) => state.users.users);\n  const data = useMemo(()=> data1, [data1]);\n  useEffect(()=> {\n    setRecords(data)\n  }, [data])\n  \n  \n  const [records, setRecords] = useState(data);\n  \n  \n  //const [dataLength ,setDataLength] = useState(0);\n  console.log({ records });\n  \n  \n  const getRowId = useCallback((row) => {\n    return row.userId;\n  }, []);\n\n  const DefaultColumnFilter = ({\n    column: { filterValue, preFilteredRows, setFilter },\n  }) => {\n    const count = preFilteredRows.length;\n    return (\n      <input\n        value={filterValue || \"\"}\n        onChange={(e) => {\n          setFilter(e.target.value || undefined);\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    );\n  };\n  const defaultColumn = { Filter: DefaultColumnFilter };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { loading, pageIndex, pageSize=5, expanded },\n  } = useTable(\n    {\n      data: records,\n      columns,\n      defaultColumn,\n      initialState: { pageIndex: 0 },\n      getRowId,\n    },\n    useFilters,\n    useSortBy,\n    usePagination\n  );\n  console.log({ rows });\n  const moveRow = (dragIndex, hoverIndex) => {\n    const dragRecord = records[dragIndex];\n    setRecords(\n      update(records, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, dragRecord],\n        ],\n      })\n    );\n  };\n  \n  return (\n    <DndProvider backend={HTML5Backend}>\n     {(error || empty) && <ErrorModal error={error} onClose={onClose} empty={empty}/>}\n      {openForm && <AddUpdate formId={formId} onClose={toggleForm} isAddUser={isAddUser} addAndUpdate={addAndUpdate} />}\n      <table {...getTableProps()} className={classes.table}>\n        <thead className={classes.header}>\n          {headerGroups.map((headerGroup) => (\n            <Fragment key={headerGroup.headers.length + \"_hfrag\"}>\n              <tr {...headerGroup.getHeaderGroupProps()} className={classes.tr}>\n                <th></th>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render(\"Header\")}\n                    <div>\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </div>\n                    <span style={{display: \"inline\"}}>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" ðŸ”½\"\n                          : \" ðŸ”¼\"\n                        : \"\"}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            </Fragment>\n          ))}\n          <tr colSpan={11} className={classes.rowcount}>\n            rows: {rows.length}\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(\n            (row, index) =>\n              prepareRow(row) || (\n                <Row\n                  index={index}\n                  row={row}\n                  moveRow={moveRow}\n                  {...row.getRowProps()}\n                  open={open}\n                  openRowId={openRowId}\n                />\n              )\n          )}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {\"<<\"}\n        </button>{\" \"}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() =>{ if (!canNextPage){getPage(currentDBPage+1)} else { nextPage()}}} >\n          {\">\"}\n        </button>{\" \"}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {\">>\"}\n        </button>{\" \"}\n        <span>\n          | Showing page{\" \"}\n          <strong>\n            {pageIndex+1} of {pageOptions.length} \n          </strong>{\" | \"}\n        </span>\n        <select\n          \n          defaultValue={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[5, 10, 20].map((_rows) => (\n            <option key={_rows} value={_rows}>\n              Show {_rows} rows\n            </option>\n          ))}\n        </select>\n        <span>\n         Current page in DB: {currentDBPage} | Load DB page: {\"\"}\n          <input\n            min={1}\n            type=\"number\"\n            defaultValue={currentDBPage+1}\n            onChange={(e) => {\n              const getpageNum = e.target.value ? Number(e.target.value) - 1 : 0;\n              if (getpageNum < 1) { return}\n              getPage(getpageNum);\n              gotoPage(getpageNum);\n            }}\n            style={{ width: \"40px\" }}\n          />\n        </span>\n      </div>\n    </DndProvider>\n  );\n};\nexport default Table;\n\nconst DND_ITEM_TYPE = \"row\";\n\nconst Row = ({ row, index, moveRow, open, openRowId }) => {\n  const [clickedRow, setClickedRow] = useState([]);\n  const dropRef = React.useRef(null);\n  const dragRef = React.useRef(null);\n\n  const [, drop] = useDrop({\n    accept: DND_ITEM_TYPE,\n    hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      console.log({ dragIndex });\n      const hoverIndex = index;\n      console.log({ hoverIndex });\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveRow(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    type: DND_ITEM_TYPE,\n    item: { index },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 0 : 1;\n\n  preview(drop(dropRef));\n  drag(dragRef);\n  \n  const userId = row.original.userId;\n            \n  let _bool;\n  clickedRow.forEach(row => {\n    if (row === userId){_bool = true}\n  })\n  \n  const clickedClass = _bool ? \"clicked\" : \"\";\n  return (\n    <React.Fragment key={index + \"_frag\"}>\n      <tr \n        className={classes[clickedClass]} \n        ref={dropRef} \n        style={{ opacity }}\n        onClick={() => {\n          if (!clickedRow.includes(userId)) {\n            setClickedRow(prev => [...prev, userId]);\n          } else {\n            setClickedRow(prev => prev.filter(_userId => _userId !== userId ));\n          }  \n        }}\n      >\n        <td ref={dragRef} className={classes.move}>move</td>\n        {row.cells.map((cell) => {\n          return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n        })}\n      </tr>\n      {open && openRowId === row.id && (\n        \n        <tr colSpan={7}>\n          <td colSpan={7}>\n            <TableNested index={index} />\n          </td>\n        </tr>\n      )}\n    </React.Fragment>\n  );\n};\n","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\store\\users-slice.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\snippets\\data.js",["82","83","84"],"// ivory: {\r\n//     users: {\r\n//       url: \"http://54.194.238.190:8080/admin_get_organization_users\",\r\n//       reqObj: {\r\n//         content: {\r\n//           organizationCode: \"Ivory\",\r\n//           pageNum: \"1\",\r\n//         },\r\n//       },\r\n//     },\r\n//     user: {\r\n//       url: \"http://54.194.238.190:8080/admin_get_user_accounts\",\r\n//       reqObj: { content: { userId: \"268\" } },\r\n//     },\r\n//   }\r\n\r\n// const FETCHED_DATA = {\r\n//   status: \"ok\",\r\n//   error: null,\r\n//   content: {\r\n//     pageCount: 4,\r\n//     list: [\r\n//       {\r\n//         firstName: \" \",\r\n//         lastName: \" \",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: '\" \"',\r\n//         userId: \"124124\",\r\n//         email: \"asdfasdf\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Test\",\r\n//         lastName: \"Ad\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"07-04-2022 19:39:42+03\",\r\n//         userId: \"111\",\r\n//         email: \"TestAd\",\r\n//         status: \"0\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"30-03-2022 18:32:58+03\",\r\n//         userId: \"47\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"16-05-2022 14:01:34+03\",\r\n//         userId: \"265\",\r\n//         email: \"gilad.benin@co.il\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"30-03-2022 18:23:11+03\",\r\n//         userId: \"46\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"30-03-2022 18:21:43+03\",\r\n//         userId: \"45\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"31-03-2022 01:13:58+03\",\r\n//         userId: \"68\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"06-04-2022 16:18:43+03\",\r\n//         userId: \"116\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"29-03-2022 17:49:56+03\",\r\n//         userId: \"37\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: '\" \"',\r\n//         userId: \"39\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"30-05-2022 18:11:12+03\",\r\n//         userId: \"40\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"12-10-2022 14:29:40+03\",\r\n//         userId: \"205\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"04-04-2022 14:22:58+03\",\r\n//         userId: \"93\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"04-04-2022 17:56:16+03\",\r\n//         userId: \"94\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"04-04-2022 19:02:56+03\",\r\n//         userId: \"95\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"04-04-2022 19:39:42+03\",\r\n//         userId: \"98\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"30-03-2022 20:17:57+03\",\r\n//         userId: \"50\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"31-03-2022 01:21:07+03\",\r\n//         userId: \"69\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"04-04-2022 19:35:45+03\",\r\n//         userId: \"97\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//       {\r\n//         firstName: \"Gilad\",\r\n//         lastName: \"Benin\",\r\n//         organizationCode: \"Ivory\",\r\n//         lastLoginDate: \"29-03-2022 23:00:50+03\",\r\n//         userId: \"43\",\r\n//         email: \"gilad.benin@gmail.com\",\r\n//         status: \"1\",\r\n//       },\r\n//     ],\r\n//     pageCurrent: 1,\r\n//   },\r\n// };\r\n\r\nconst DUMMY_NESTED = {\r\n  status: \"ok\",\r\n  error: null,\r\n  content: {\r\n    list: [\r\n      {\r\n        bank: 20,\r\n        accountName: \"20-1-1 Account\",\r\n        isDefaultAccount: true,\r\n        accountType: 1,\r\n        branch: 1,\r\n        account: 1,\r\n      },\r\n      {\r\n        bank: 20,\r\n        accountName: \"20-1-2 Account\",\r\n        isDefaultAccount: false,\r\n        accountType: 1,\r\n        branch: 1,\r\n        account: 2,\r\n      },\r\n      {\r\n        bank: 20,\r\n        accountName: \"20-1-10656 Account\",\r\n        isDefaultAccount: false,\r\n        accountType: 1,\r\n        branch: 1,\r\n        account: 10656,\r\n      },\r\n      {\r\n        bank: 20,\r\n        accountName: \"20-3-100189 Account\",\r\n        isDefaultAccount: false,\r\n        accountType: 1,\r\n        branch: 3,\r\n        account: 100189,\r\n      },\r\n      {\r\n        bank: 20,\r\n        accountName: \"20-61-14706 Account\",\r\n        isDefaultAccount: false,\r\n        accountType: 1,\r\n        branch: 61,\r\n        account: 14706,\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst dbobj = {\r\n  firebase: {\r\n    users: {\r\n      url: \"https://react-http2-66530-default-rtdb.firebaseio.com/users.json\",\r\n    },\r\n    user: {\r\n      url: \"https://react-http2-66530-default-rtdb.firebaseio.com/user.json\",\r\n    },\r\n  },\r\n  ivory: {\r\n    users: {\r\n      url: \"http://54.194.238.190:8080/admin_get_organization_users\",\r\n      reqObj: {\r\n        content: {\r\n          organizationCode: \"Ivory\",\r\n          pageNum: \"1\",\r\n        },\r\n      },\r\n    },\r\n    user: {\r\n      url: \"http://54.194.238.190:8080/admin_get_user_accounts\",\r\n      reqObj: { content: { userId: \"268\" } },\r\n    },\r\n  },\r\n};\r\nconst { firebase, ivory } = dbobj;\r\nconst justData = (db) => {\r\n  return db\r\n};\r\nexport default justData;\r\n",["85","86"],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\services\\baseHttp.js",["87"],"import axios from \"axios\";\r\n\r\n\r\nconst BASE_URL = \"http://54.194.238.190:8080/\";\r\nconst BASE_URL_FB = \"https://react-http2-66530-default-rtdb.firebaseio.com/\";\r\n\r\nexport const httpService = {\r\n  get(endpoint, b) {\r\n    return ajax(endpoint, b);\r\n  },\r\n  post(endpoint, data, b) {\r\n  \r\n    console.log(` httpsService: endpoint: ${endpoint} , data/reqObj ${JSON.stringify(data)}`)\r\n    return ajax(endpoint, data, \"POST\", b);\r\n  },\r\n  put(endpoint, data, b) {\r\n    return ajax(endpoint, data, \"PUT\", b);\r\n   },\r\n  delete(endpoint, data, b) {\r\n    return ajax(endpoint, data, \"DELETE\", b);\r\n  },\r\n};\r\n\r\nconst ajax = async (endpoint,  data = null, method=\"GET\", base=BASE_URL) => {\r\n  \r\n  try {\r\n    \r\n    const res = await axios({\r\n      url: `${base}${endpoint}`,\r\n      method,\r\n      data,\r\n      body: JSON.stringify(data),\r\n    });\r\n    \r\n    return res.data.content;\r\n  } catch (err) {\r\n    const _data = JSON.stringify(data)\r\n    const customErrorMessage =`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${_data}`\r\n    const error = {...err, customErrorMessage}\r\n    console.log(\r\n      customErrorMessage\r\n    );\r\n    console.dir(err);\r\n    if (err.response && err.response.status === 401) {\r\n      sessionStorage.clear();\r\n      if (method === \"GET\") window.location.assign(\"/\");\r\n    \r\n    }\r\n    throw error;   \r\n  }\r\n}\r\n","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\services\\adminHttp.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\UI\\Card.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\Layout\\MainHeader.js",["88","89","90"],"import React ,{useState, useRef} from \"react\";\r\nimport { usersActions } from \"../../store/users-slice\";\r\nimport { FcRefresh } from \"react-icons/fc\";\r\nimport classes from \"./MainHeader.module.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getUsersSearch } from \"../../services/adminHttp\";\r\n\r\nconst MainHeader = (props) => {\r\n  const [error, setError] = useState(false);\r\n  const [empty, setEmpty] = useState(false);\r\n  const [laidng, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const searchRef = useRef()\r\n  const clickHandler = () => {\r\n    console.clear();\r\n    props.refresh();\r\n  };\r\n  const fetchData = async (searchVal)=> {\r\n    try {\r\n    setLoading(true)\r\n    const res = await getUsersSearch(searchVal)\r\n    const data = await res.list;\r\n    console.log(\"Search data : \", data)\r\n    if (data.length === 0) {\r\n      console.log(\"data.length\", data.length)\r\n      setEmpty(true)\r\n    }\r\n    dispatch(usersActions.setDbUsers(res.list));\r\n    setLoading(false);\r\n    } catch (err)\r\n    {\r\n      setError(err)\r\n    }  \r\n  }  \r\n  const submitHandler = ()=> {\r\n    const search = searchRef.current.value;\r\n    fetchData(search);\r\n  }\r\n  return (\r\n    <header className={classes.header}>\r\n      \r\n      <div>\r\n        <span onClick={clickHandler} className={classes.refreshbutton}>\r\n          <FcRefresh />\r\n        </span>\r\n\r\n        {props.loading && (\r\n          <span\r\n            style={{ display: \"inline-block\", width: \"40px\", color: \"red\" }}\r\n          >\r\n            Loading...\r\n          </span>\r\n        )}\r\n        {props.empty && (\r\n          <span\r\n            style={{ color: \"blue\", height: \"10px\", margin: \"0\", padding: \"0\" }}\r\n          >\r\n            Loading data returned empty{\" \"}\r\n          </span>\r\n        )}\r\n        <span style={{position: \"absolute\", left: \"400px\"}}>\r\n          <label>Search user: </label>\r\n          <input ref={searchRef}></input>\r\n          <input type=\"submit\" onClick={submitHandler}></input>\r\n        </span>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MainHeader;\r\n","C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\UI\\Modal.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\store\\table-slice.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\UI\\ErrorModal.js",[],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\App.js",["91","92","93","94"],"C:\\Users\\user\\Desktop\\table_tirgul1\\src\\components\\Layout\\Layout.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":8,"column":32,"nodeType":"101","messageId":"102","endLine":8,"endColumn":54},{"ruleId":"99","severity":1,"message":"103","line":2,"column":35,"nodeType":"101","messageId":"102","endLine":2,"endColumn":43},{"ruleId":"99","severity":1,"message":"104","line":45,"column":10,"nodeType":"101","messageId":"102","endLine":45,"endColumn":19},{"ruleId":"99","severity":1,"message":"105","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":21},{"ruleId":"99","severity":1,"message":"106","line":64,"column":14,"nodeType":"101","messageId":"102","endLine":64,"endColumn":21},{"ruleId":"99","severity":1,"message":"107","line":64,"column":46,"nodeType":"101","messageId":"102","endLine":64,"endColumn":54},{"ruleId":"99","severity":1,"message":"108","line":208,"column":7,"nodeType":"101","messageId":"102","endLine":208,"endColumn":19},{"ruleId":"99","severity":1,"message":"109","line":282,"column":9,"nodeType":"101","messageId":"102","endLine":282,"endColumn":17},{"ruleId":"99","severity":1,"message":"110","line":282,"column":19,"nodeType":"101","messageId":"102","endLine":282,"endColumn":24},{"ruleId":"95","replacedBy":"111"},{"ruleId":"97","replacedBy":"112"},{"ruleId":"99","severity":1,"message":"113","line":5,"column":7,"nodeType":"101","messageId":"102","endLine":5,"endColumn":18},{"ruleId":"99","severity":1,"message":"114","line":9,"column":10,"nodeType":"101","messageId":"102","endLine":9,"endColumn":15},{"ruleId":"99","severity":1,"message":"115","line":10,"column":10,"nodeType":"101","messageId":"102","endLine":10,"endColumn":15},{"ruleId":"99","severity":1,"message":"116","line":11,"column":10,"nodeType":"101","messageId":"102","endLine":11,"endColumn":16},{"ruleId":"99","severity":1,"message":"117","line":3,"column":8,"nodeType":"101","messageId":"102","endLine":3,"endColumn":17},{"ruleId":"99","severity":1,"message":"118","line":8,"column":8,"nodeType":"101","messageId":"102","endLine":8,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":65,"column":5,"nodeType":"121","endLine":65,"endColumn":14,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":232,"column":5,"nodeType":"121","endLine":232,"endColumn":7,"suggestions":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'setIsLodingNestedTable' is assigned a value but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'submitted' is assigned a value but never used.","'useDispatch' is defined but never used.","'loading' is assigned a value but never used.","'expanded' is assigned a value but never used.","'DUMMY_NESTED' is assigned a value but never used.","'firebase' is assigned a value but never used.","'ivory' is assigned a value but never used.",["125"],["126"],"'BASE_URL_FB' is assigned a value but never used.","'error' is assigned a value but never used.","'empty' is assigned a value but never used.","'laidng' is assigned a value but never used.","'AddUpdate' is defined but never used.","'ErrorModal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentDBPage' and 'fetchData'. Either include them or remove the dependency array.","ArrayExpression",["127"],"React Hook useMemo has missing dependencies: 'dispatch' and 'toggleRowOpen'. Either include them or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [currentDBPage, fetchData, refresh]",{"range":"133","text":"134"},"Update the dependencies array to be: [dispatch, toggleRowOpen]",{"range":"135","text":"136"},[2020,2029],"[currentDBPage, fetchData, refresh]",[6543,6545],"[dispatch, toggleRowOpen]"]