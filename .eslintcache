[{"/home/shimon/Documents/work/ReactTable/src/index.js":"1","/home/shimon/Documents/work/ReactTable/src/App.js":"2","/home/shimon/Documents/work/ReactTable/src/store/index.js":"3","/home/shimon/Documents/work/ReactTable/src/store/users-slice.js":"4","/home/shimon/Documents/work/ReactTable/src/store/table-slice.js":"5","/home/shimon/Documents/work/ReactTable/src/components/Layout/Layout.js":"6","/home/shimon/Documents/work/ReactTable/src/components/Table.js":"7","/home/shimon/Documents/work/ReactTable/src/components/UI/ErrorModal.js":"8","/home/shimon/Documents/work/ReactTable/src/components/AddUpdate.js":"9","/home/shimon/Documents/work/ReactTable/src/services/adminHttp.js":"10","/home/shimon/Documents/work/ReactTable/src/components/TableNested.js":"11","/home/shimon/Documents/work/ReactTable/src/components/Layout/MainHeader.js":"12","/home/shimon/Documents/work/ReactTable/src/components/UI/Card.js":"13","/home/shimon/Documents/work/ReactTable/src/components/UI/Modal.js":"14","/home/shimon/Documents/work/ReactTable/src/services/baseHttp.js":"15"},{"size":559,"mtime":1667680248213,"results":"16","hashOfConfig":"17"},{"size":7963,"mtime":1667738774324,"results":"18","hashOfConfig":"17"},{"size":269,"mtime":1667680248213,"results":"19","hashOfConfig":"17"},{"size":3361,"mtime":1667680248213,"results":"20","hashOfConfig":"17"},{"size":712,"mtime":1667680248213,"results":"21","hashOfConfig":"17"},{"size":373,"mtime":1667680248209,"results":"22","hashOfConfig":"17"},{"size":10122,"mtime":1667743818260,"results":"23","hashOfConfig":"17"},{"size":608,"mtime":1667680248213,"results":"24","hashOfConfig":"17"},{"size":5524,"mtime":1667680248209,"results":"25","hashOfConfig":"17"},{"size":1474,"mtime":1667680248213,"results":"26","hashOfConfig":"17"},{"size":3482,"mtime":1667680248213,"results":"27","hashOfConfig":"17"},{"size":1998,"mtime":1667680248209,"results":"28","hashOfConfig":"17"},{"size":222,"mtime":1667680248213,"results":"29","hashOfConfig":"17"},{"size":745,"mtime":1667680248213,"results":"30","hashOfConfig":"17"},{"size":1304,"mtime":1667680248213,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tvsb9r",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},"/home/shimon/Documents/work/ReactTable/src/index.js",[],"/home/shimon/Documents/work/ReactTable/src/App.js",["67","68","69","70","71"],"/home/shimon/Documents/work/ReactTable/src/store/index.js",[],"/home/shimon/Documents/work/ReactTable/src/store/users-slice.js",[],"/home/shimon/Documents/work/ReactTable/src/store/table-slice.js",[],"/home/shimon/Documents/work/ReactTable/src/components/Layout/Layout.js",[],["72","73"],"/home/shimon/Documents/work/ReactTable/src/components/Table.js",["74","75","76","77","78"],"/home/shimon/Documents/work/ReactTable/src/components/UI/ErrorModal.js",[],"/home/shimon/Documents/work/ReactTable/src/components/AddUpdate.js",["79","80"],"import { useDispatch } from \"react-redux\";\nimport React, { useState, useRef, Fragment } from \"react\";\nimport { usersActions } from \"../store/users-slice\";\nimport classes from \"./AddUpdate.module.css\";\nimport Modal from \"./UI/Modal\";\n\nconst _date = Date();\n\nconst AddUpdate = (props) => {\n  console.log(\"in <AddUpdate.>\");\n  const both = props.addAndUpdate;\n  let { firstName, lastName, organizationCode, userId, email } = props.formId;\n  if (props.isAddUser) {\n    firstName= \"\";\n    lastName=\"\";\n    organizationCode=\"\";\n    email=\"\";\n  }\n  \n  const firstNameRef = useRef();\n  const lastNameRef = useRef();\n  const organizationCodeRef = useRef();\n  const emailRef = useRef();\n  const saveRef = useRef();\n  const dateRef = useRef();\n  // const [form, setForm] = useState({\n  //   firstName: \"\",\n  //   lastName: \"\",\n  //   organizationCode: \"\",\n  //   lastLoginDate: \"\",\n  //   userId: \"\",\n  //   email: \"\",\n  //   status: \"\",\n  //   accountInfo: [\n  //     {\n  //       bank: \"\",\n  //       accountName: \"\",\n  //       isDefaultAccount: \"\",\n  //       accountType: \"\",\n  //       branch: \"\",\n  //       account: \"\",\n  //     },\n  //   ],\n  // });\n  const [submitted, setSubmitted] = useState(false);\n  const dispatch = useDispatch();\n\n  const addHandler = () => {\n   \n    const newUser = {\n      firstName: firstNameRef.current.value,\n      lastName: lastNameRef.current.value,\n      organizationCode: organizationCodeRef.current.value,\n      //editing the lastLoginDate for a new user or cuurent is nonsensicle from any way you decide to look at it\n      lastLoginDate: dateRef.current.value,\n      userId: \"\",\n      email: emailRef.current.value,\n      status: \"\",\n      accountInfo: [\n        {\n          bank: \"\",\n          accountName: \"\",\n          isDefaultAccount: \"\",\n          accountType: \"\",\n          branch: \"\",\n          account: \"\",\n        },\n      ],\n    };\n\n    dispatch(usersActions.addNewUser({newUser, userId}));\n    setSubmitted(true);\n  };\n  const updateHandler = () => {\n    const save = saveRef.current.value;\n    if (save) {\n      dispatch(usersActions.saveOldVal(props.index));\n    }\n\n    const update = {\n      firstName: firstNameRef.current.value,\n      lastName: lastNameRef.current.value,\n      organizationCode: organizationCodeRef.current.value,\n      lastLoginDate: _date,\n      userId: \"\",\n      email: emailRef.current.value,\n      status: \"\",\n      accountInfo: [\n        {\n          bank: \"\",\n          accountName: \"\",\n          isDefaultAccount: \"\",\n          accountType: \"\",\n          branch: \"\",\n          account: \"\",\n        },\n      ],\n    };\n\n    dispatch(usersActions.updateUser({ userId: userId, update, save }));\n    setSubmitted(true);\n  };\n  return (\n    <Modal onClose={props.onClose}>\n      <form onSubmit={addHandler}>\n        {/* {submitted && (\n          <div>{`First Name: ${form.firstName} Last Name: ${form.lastName}`}</div>\n        )} */}\n        <div className={classes[\"form-control\"]}>\n          <div>\n            <label htmlFor=\"save\">Save current user info?</label>\n            <input ref={saveRef} id=\"save\" type=\"checkbox\" value=\"true\" className={classes.savechkBox}></input>\n          </div>\n          <div>\n            <label htmlFor=\"fname\">First Name</label>\n            <input\n              ref={firstNameRef}\n              id=\"fname\"\n              type=\"text\"\n              defaultValue={firstName}\n            ></input>\n          </div>\n          <div>\n            <label htmlFor=\"lname\">Last Name</label>\n            <input\n              ref={lastNameRef}\n              id=\"lname\"\n              type=\"text\"\n              defaultValue={lastName}\n            ></input>\n          </div>\n          <div>\n            <label htmlFor=\"date\">Date</label>\n            <input\n              ref={dateRef}\n              id=\"date\"\n              type=\"date\"\n              defaultValue={_date}\n            ></input>\n          </div>\n\n          <div>\n            <label htmlFor=\"organizationCode\">Organization Code</label>\n            <input\n              ref={organizationCodeRef}\n              id=\"organizationCode\"\n              type=\"text\"\n              defaultValue={organizationCode}\n            ></input>\n          </div>\n          <div>\n            <label htmlFor=\"email\">E-mail</label>\n            <input\n              ref={emailRef}\n              id=\"email\"\n              type=\"email\"\n              defaultValue={email}\n            ></input>\n          </div>\n          <div className={classes[\"form-actions\"]}>\n            {(props.isAddUser || both) && <button\n              style={{ margin: \"15px\" }}\n              className={classes.addUserbtn}\n              type=\"button\"\n              onClick={() => {\n                addHandler();\n                props.onClose();\n              }}\n            >\n              Add new User\n            </button>}\n            {(!props.isAddUser || both) && <button\n              style={{ margin: \"15px\" }}\n              className={classes.changeUserbtn}\n              type=\"button\"\n              onClick={() => {\n                updateHandler();\n                props.onClose();\n              }}\n            >\n              Submit changes for User: {userId}\n            </button>}\n            <button\n              style={{ margin: \"15px\" }}\n              className={classes.closebtn}\n              onClick={() => {\n                props.onClose();\n              }}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </form>\n    </Modal>\n  );\n};\nexport default AddUpdate;\n","/home/shimon/Documents/work/ReactTable/src/services/adminHttp.js",[],"/home/shimon/Documents/work/ReactTable/src/components/TableNested.js",["81"],"import React, { useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\n\nconst TableNested = (props) => {\n  console.log(\"<NestedTable>\");\n  \n  const [isLoadingNestedTable, setIsLodingNestedTable] = useState(false);\n\n  const acc = useSelector((state) => state.users.users[props.index].accountInfo);\n  console.log(acc);\n  const DefaultColumnFilter = ({\n    column: { filterValue, preFilteredRows, setFilter },\n  }) => {\n    const count = preFilteredRows.length;\n    return (\n      <input\n        value={filterValue || \"\"}\n        onChange={(e) => {\n          setFilter(e.target.value || undefined);\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    );\n  };\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n  const data = useMemo(() => acc, [acc]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Bank\",\n        accessor: \"bank\",\n      },\n      {\n        Header: \"Account Name\",\n        accessor: \"accountName\",\n      },\n      {\n        Header: \"Default Account\",\n        accessor: \"isDefaultAccount\",\n        Cell: (props)=> {\n          const bool = props.row.original.isDefaultAccount.toString()\n          console.log(\"is default cell\",)\n          return <span>{bool}</span>\n        }\n      },\n      {\n        Header: \"Account Type\",\n        accessor: \"accountType\",\n      },\n      {\n        Header: \"Branch\",\n        accessor: \"branch\",\n      },\n      {\n        Header: \"Account Number\",\n        accessor: \"account\",\n      },\n    ],\n    []\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable(\n      {\n        columns,\n        data,\n        defaultColumn,\n      },\n      useFilters,\n      useSortBy\n    );\n\n  return (\n    <React.Fragment>\n      {isLoadingNestedTable && <h2 style={{ color: \"red\" }}>Loading...</h2>}\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <React.Fragment key={headerGroup.headers.length + \"_hfrag\"}>\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render(\"Header\")}\n                    <div>\n                      {column.canFilter ? column.render(\"Filter\") : null}\n                    </div>\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"\"}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            </React.Fragment>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <React.Fragment key={i + \"_frag\"}>\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                    );\n                  })}\n                </tr>\n              </React.Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n    </React.Fragment>\n  );\n};\nexport default TableNested;\n","/home/shimon/Documents/work/ReactTable/src/components/Layout/MainHeader.js",["82","83","84"],"import React ,{useState, useRef} from \"react\";\nimport { usersActions } from \"../../store/users-slice\";\nimport { FcRefresh } from \"react-icons/fc\";\nimport classes from \"./MainHeader.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { getUsersSearch } from \"../../services/adminHttp\";\n\nconst MainHeader = (props) => {\n  const [error, setError] = useState(false);\n  const [empty, setEmpty] = useState(false);\n  const [laidng, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const searchRef = useRef()\n  const clickHandler = () => {\n    console.clear();\n    props.refresh();\n  };\n  const fetchData = async (searchVal)=> {\n    try {\n    setLoading(true)\n    const res = await getUsersSearch(searchVal)\n    const data = await res.list;\n    console.log(\"Search data : \", data)\n    if (data.length === 0) {\n      console.log(\"data.length\", data.length)\n      setEmpty(true)\n    }\n    dispatch(usersActions.setDbUsers(res.list));\n    setLoading(false);\n    } catch (err)\n    {\n      setError(err)\n    }  \n  }  \n  const submitHandler = ()=> {\n    const search = searchRef.current.value;\n    fetchData(search);\n  }\n  return (\n    <header className={classes.header}>\n      \n      <div>\n        <span onClick={clickHandler} className={classes.refreshbutton}>\n          <FcRefresh />\n        </span>\n\n        {props.loading && (\n          <span\n            style={{ display: \"inline-block\", width: \"40px\", color: \"red\" }}\n          >\n            Loading...\n          </span>\n        )}\n        {props.empty && (\n          <span\n            style={{ color: \"blue\", height: \"10px\", margin: \"0\", padding: \"0\" }}\n          >\n            Loading data returned empty{\" \"}\n          </span>\n        )}\n        <span style={{position: \"absolute\", left: \"400px\"}}>\n          <label>Search user: </label>\n          <input ref={searchRef}></input>\n          <input type=\"submit\" onClick={submitHandler}></input>\n        </span>\n      </div>\n    </header>\n  );\n};\n\nexport default MainHeader;\n","/home/shimon/Documents/work/ReactTable/src/components/UI/Card.js",[],"/home/shimon/Documents/work/ReactTable/src/components/UI/Modal.js",[],"/home/shimon/Documents/work/ReactTable/src/services/baseHttp.js",["85"],"import axios from \"axios\";\n\n\nconst BASE_URL = \"http://54.194.238.190:8080/\";\nconst BASE_URL_FB = \"https://react-http2-66530-default-rtdb.firebaseio.com/\";\n\nexport const httpService = {\n  get(endpoint, b) {\n    return ajax(endpoint, b);\n  },\n  post(endpoint, data, b) {\n  \n    console.log(` httpsService: endpoint: ${endpoint} , data/reqObj ${JSON.stringify(data)}`)\n    return ajax(endpoint, data, \"POST\", b);\n  },\n  put(endpoint, data, b) {\n    return ajax(endpoint, data, \"PUT\", b);\n   },\n  delete(endpoint, data, b) {\n    return ajax(endpoint, data, \"DELETE\", b);\n  },\n};\n\nconst ajax = async (endpoint,  data = null, method=\"GET\", base=BASE_URL) => {\n  \n  try {\n    \n    const res = await axios({\n      url: `${base}${endpoint}`,\n      method,\n      data,\n      body: JSON.stringify(data),\n    });\n    \n    return res.data.content;\n  } catch (err) {\n    const _data = JSON.stringify(data)\n    const customErrorMessage =`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${_data}`\n    const error = {...err, customErrorMessage}\n    console.log(\n      customErrorMessage\n    );\n    console.dir(err);\n    if (err.response && err.response.status === 401) {\n      sessionStorage.clear();\n      if (method === \"GET\") window.location.assign(\"/\");\n    \n    }\n    throw error;   \n  }\n}\n",{"ruleId":"86","severity":1,"message":"87","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":17},{"ruleId":"86","severity":1,"message":"90","line":8,"column":8,"nodeType":"88","messageId":"89","endLine":8,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":15,"column":7,"nodeType":"88","messageId":"89","endLine":15,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":65,"column":22,"nodeType":"94","endLine":65,"endColumn":23},{"ruleId":"92","severity":1,"message":"95","line":240,"column":5,"nodeType":"96","endLine":240,"endColumn":7,"suggestions":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"86","severity":1,"message":"102","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":21},{"ruleId":"86","severity":1,"message":"103","line":55,"column":5,"nodeType":"88","messageId":"89","endLine":55,"endColumn":20},{"ruleId":"86","severity":1,"message":"104","line":56,"column":5,"nodeType":"88","messageId":"89","endLine":56,"endColumn":16},{"ruleId":"86","severity":1,"message":"105","line":62,"column":14,"nodeType":"88","messageId":"89","endLine":62,"endColumn":21},{"ruleId":"86","severity":1,"message":"106","line":62,"column":44,"nodeType":"88","messageId":"89","endLine":62,"endColumn":52},{"ruleId":"86","severity":1,"message":"107","line":2,"column":35,"nodeType":"88","messageId":"89","endLine":2,"endColumn":43},{"ruleId":"86","severity":1,"message":"108","line":45,"column":10,"nodeType":"88","messageId":"89","endLine":45,"endColumn":19},{"ruleId":"86","severity":1,"message":"109","line":8,"column":32,"nodeType":"88","messageId":"89","endLine":8,"endColumn":54},{"ruleId":"86","severity":1,"message":"110","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":15},{"ruleId":"86","severity":1,"message":"111","line":10,"column":10,"nodeType":"88","messageId":"89","endLine":10,"endColumn":15},{"ruleId":"86","severity":1,"message":"112","line":11,"column":10,"nodeType":"88","messageId":"89","endLine":11,"endColumn":16},{"ruleId":"86","severity":1,"message":"113","line":5,"column":7,"nodeType":"88","messageId":"89","endLine":5,"endColumn":18},"no-unused-vars","'AddUpdate' is defined but never used.","Identifier","unusedVar","'ErrorModal' is defined but never used.","'_currentDB' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the '_currentDB' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useMemo has missing dependencies: 'dispatch' and 'toggleRowOpen'. Either include them or remove the dependency array.","ArrayExpression",["114"],"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"'useDispatch' is defined but never used.","'canPreviousPage' is assigned a value but never used.","'canNextPage' is assigned a value but never used.","'loading' is assigned a value but never used.","'expanded' is assigned a value but never used.","'Fragment' is defined but never used.","'submitted' is assigned a value but never used.","'setIsLodingNestedTable' is assigned a value but never used.","'error' is assigned a value but never used.","'empty' is assigned a value but never used.","'laidng' is assigned a value but never used.","'BASE_URL_FB' is assigned a value but never used.",{"desc":"117","fix":"118"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [dispatch, toggleRowOpen]",{"range":"119","text":"120"},[6835,6837],"[dispatch, toggleRowOpen]"]